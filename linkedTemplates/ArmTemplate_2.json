{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "adfteo1"
        },
        "tr_population_data_arrives_properties_typeProperties_scope": {
            "type": "string",
            "defaultValue": "/subscriptions/6c8e23df-4aec-4ed5-bec5-79853ea6c6c6/resourceGroups/rg-teo1/providers/Microsoft.Storage/storageAccounts/ablobteo1"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/pl_afunc_test')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Azure Function Test",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "functeo1",
                            "body": {
                                "name": "LeoTestADF"
                            },
                            "headers": {},
                            "method": "POST"
                        },
                        "linkedServiceName": {
                            "referenceName": "ls_afunc_afuncteo1",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "annotations": [],
                "lastPublishTime": "2024-07-15T11:44:01Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/df_transform_cases_deaths')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ds_raw_cases_deaths",
                                "type": "DatasetReference"
                            },
                            "name": "CasesAndDeathsSource"
                        },
                        {
                            "dataset": {
                                "referenceName": "ds_country_lookup",
                                "type": "DatasetReference"
                            },
                            "name": "CountryLookup"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ds_process_casesdeaths",
                                "type": "DatasetReference"
                            },
                            "name": "CasesDeathsSink"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "FilterEUOnly"
                        },
                        {
                            "name": "SelectRequiredFields"
                        },
                        {
                            "name": "Pivot"
                        },
                        {
                            "name": "LookupCountry"
                        },
                        {
                            "name": "SelectFinal"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          country as string,",
                        "          country_code as string,",
                        "          continent as string,",
                        "          population as integer,",
                        "          indicator as string,",
                        "          daily_count as integer,",
                        "          date as date,",
                        "          rate_14_day as double,",
                        "          source as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> CasesAndDeathsSource",
                        "source(output(",
                        "          country as string,",
                        "          country_code_2_digit as string,",
                        "          country_code_3_digit as string,",
                        "          continent as string,",
                        "          population as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> CountryLookup",
                        "CasesAndDeathsSource filter(continent == \"Europe\" && not(isNull(country_code))) ~> FilterEUOnly",
                        "FilterEUOnly select(mapColumn(",
                        "          country,",
                        "          country_code,",
                        "          population,",
                        "          indicator,",
                        "          daily_count,",
                        "          source,",
                        "          each(match(name==\"date\"),",
                        "               \"reported_\"+\"date\" = $$)",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
                        "SelectRequiredFields pivot(groupBy(country,",
                        "          country_code,",
                        "          population,",
                        "          source,",
                        "          reported_date),",
                        "     pivotBy(indicator, ['confirmed cases', 'deaths']),",
                        "     count = sum(daily_count),",
                        "     columnNaming: '$V_$N',",
                        "     lateral: true) ~> Pivot",
                        "Pivot, CountryLookup lookup(Pivot@country == CountryLookup@country,",
                        "     multiple: false,",
                        "     pickup: 'first',",
                        "     asc(CountryLookup@country, true),",
                        "     broadcast: 'auto')~> LookupCountry",
                        "LookupCountry select(mapColumn(",
                        "          country = Pivot@country,",
                        "          country_code_2_digit,",
                        "          country_code_3_digit,",
                        "          population = Pivot@population,",
                        "          cases_count = {confirmed cases_count},",
                        "          deaths_count,",
                        "          reported_date,",
                        "          source",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> SelectFinal",
                        "SelectFinal sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:['cases_and_deaths.csv'],",
                        "     truncate: true,",
                        "     umask: 0022,",
                        "     preCommands: [],",
                        "     postCommands: [],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> CasesDeathsSink"
                    ]
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/df_transform_hospital_admissions')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "ds_raw_hospital_admissions",
                                "type": "DatasetReference"
                            },
                            "name": "HospitalAdmissionsSource"
                        },
                        {
                            "dataset": {
                                "referenceName": "ds_country_lookup",
                                "type": "DatasetReference"
                            },
                            "name": "CountryLookup"
                        },
                        {
                            "dataset": {
                                "referenceName": "ds_dimdate__lookup",
                                "type": "DatasetReference"
                            },
                            "name": "DimDateLookup"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "ds_processed_hospital_adm_weekly",
                                "type": "DatasetReference"
                            },
                            "name": "SinkWeekly"
                        },
                        {
                            "dataset": {
                                "referenceName": "ds_processed_hospital_admissions_daily",
                                "type": "DatasetReference"
                            },
                            "name": "SinkDaily"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "SelectReqdFields1"
                        },
                        {
                            "name": "LookupCountry"
                        },
                        {
                            "name": "Split"
                        },
                        {
                            "name": "SelectReqdFields2"
                        },
                        {
                            "name": "AggDimDate"
                        },
                        {
                            "name": "JoinWeeklyToDimDate"
                        },
                        {
                            "name": "PivotWeekly"
                        },
                        {
                            "name": "PivotDaily"
                        },
                        {
                            "name": "SortWeekly"
                        },
                        {
                            "name": "SortDaily"
                        },
                        {
                            "name": "SelectReqdFields3"
                        },
                        {
                            "name": "SelectReqdFields4"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          country as string,",
                        "          indicator as string,",
                        "          date as date,",
                        "          year_week as string,",
                        "          value as double,",
                        "          source as string,",
                        "          url as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> HospitalAdmissionsSource",
                        "source(output(",
                        "          country as string,",
                        "          country_code_2_digit as string,",
                        "          country_code_3_digit as string,",
                        "          continent as string,",
                        "          population as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> CountryLookup",
                        "source(output(",
                        "          date_key as string,",
                        "          date as string,",
                        "          year as string,",
                        "          month as string,",
                        "          day as string,",
                        "          day_name as string,",
                        "          day_of_year as string,",
                        "          week_of_month as string,",
                        "          week_of_year as string,",
                        "          month_name as string,",
                        "          year_month as string,",
                        "          year_week as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> DimDateLookup",
                        "HospitalAdmissionsSource select(mapColumn(",
                        "          country,",
                        "          indicator,",
                        "          reported_date = date,",
                        "          reported_year_week = year_week,",
                        "          value,",
                        "          source",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> SelectReqdFields1",
                        "SelectReqdFields1, CountryLookup lookup(SelectReqdFields1@country == CountryLookup@country,",
                        "     multiple: false,",
                        "     pickup: 'first',",
                        "     asc(CountryLookup@country, true),",
                        "     broadcast: 'auto')~> LookupCountry",
                        "SelectReqdFields2 split(indicator == \"Weekly new hospital admissions per 100k\" || indicator == \"Weekly new ICU admissions per 100k\",",
                        "     disjoint: false) ~> Split@(Weekly, Daily)",
                        "LookupCountry select(mapColumn(",
                        "          country = SelectReqdFields1@country,",
                        "          indicator,",
                        "          reported_date,",
                        "          reported_year_week,",
                        "          value,",
                        "          source,",
                        "          country = CountryLookup@country,",
                        "          country_code_2_digit,",
                        "          country_code_3_digit,",
                        "          population",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> SelectReqdFields2",
                        "DimDateLookup aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),",
                        "     week_start_date = min(date),",
                        "          week_end_date = max(date)) ~> AggDimDate",
                        "Split@Weekly, AggDimDate join(reported_year_week == ecdc_year_week,",
                        "     joinType:'inner',",
                        "     matchType:'exact',",
                        "     ignoreSpaces: false,",
                        "     broadcast: 'auto')~> JoinWeeklyToDimDate",
                        "JoinWeeklyToDimDate pivot(groupBy(country,",
                        "          country_code_2_digit,",
                        "          country_code_3_digit,",
                        "          population,",
                        "          reported_year_week,",
                        "          source,",
                        "          week_start_date,",
                        "          week_end_date),",
                        "     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
                        "     coun = sum(value),",
                        "     columnNaming: '$V_$N',",
                        "     lateral: true) ~> PivotWeekly",
                        "Split@Daily pivot(groupBy(country,",
                        "          country_code_2_digit,",
                        "          country_code_3_digit,",
                        "          population,",
                        "          reported_date,",
                        "          source),",
                        "     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
                        "     count = sum(value),",
                        "     columnNaming: '$V_$N',",
                        "     lateral: true) ~> PivotDaily",
                        "PivotWeekly sort(desc(reported_year_week, true),",
                        "     asc(country, true),",
                        "     partitionBy('hash', 1)) ~> SortWeekly",
                        "PivotDaily sort(desc(reported_date, true),",
                        "     asc(country, true),",
                        "     partitionBy('hash', 1)) ~> SortDaily",
                        "SortWeekly select(mapColumn(",
                        "          country,",
                        "          country_code_2_digit,",
                        "          country_code_3_digit,",
                        "          population,",
                        "          reported_year_week,",
                        "          reported_week_start_date = week_start_date,",
                        "          reported_week_end_date = week_end_date,",
                        "          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_coun},",
                        "          new_ICU_occupancy_count = {Weekly new ICU admissions per 100k_coun},",
                        "          source",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> SelectReqdFields3",
                        "SortDaily select(mapColumn(",
                        "          country,",
                        "          country_code_2_digit,",
                        "          country_code_3_digit,",
                        "          population,",
                        "          reported_date,",
                        "          hospital_occupancy_count = {Daily hospital occupancy_count},",
                        "          ICU_occupancy_count = {Daily ICU occupancy_count},",
                        "          source",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> SelectReqdFields4",
                        "SelectReqdFields3 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:['hospital_admissions_weekly.csv'],",
                        "     truncate: true,",
                        "     umask: 0022,",
                        "     preCommands: [],",
                        "     postCommands: [],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> SinkWeekly",
                        "SelectReqdFields4 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:['hospital_admissions_daily.csv'],",
                        "     truncate: true,",
                        "     umask: 0022,",
                        "     preCommands: [],",
                        "     postCommands: [],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> SinkDaily"
                    ]
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_ingest_blob_to_adl')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Check if File Exists",
                        "type": "Validation",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_population_raw_gz",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "timeout": "0.00:00:30",
                            "sleep": 10,
                            "minimumSize": 1024
                        }
                    },
                    {
                        "name": "Get File Metadata",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "Check if File Exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_population_raw_gz",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "fieldList": [
                                "columnCount",
                                "size",
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If Metadata is Correct",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get File Metadata",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(activity('Get File Metadata').output.columnCount, 13)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Copy Population Data",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_population_raw_gz",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_adls_covidreportingdl",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete Source File",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "Copy Population Data",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_population_raw_gz",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "ingest"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-03T16:41:48Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_ingest_http_to_adl')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get File List",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "ds_ecdc_file_list",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Iterate File Names",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get File List",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get File List').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Ingest ECDC using HTTP",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "HttpReadSettings",
                                                "requestMethod": "GET"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_ecdc_raw_csv_http",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "relativeURL": {
                                                    "value": "@item().sourceRelativeURL",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_ecdc_raw_csv_dl",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "fileName": {
                                                    "value": "@item().sinkFileName",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "ingest"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-03T16:41:48Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_copy_adl_to_sqldb_hospital')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Hospital Admissions to SQLDB",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE covid_reporting.hospital_admissions_daily",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "country",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "country",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "country_code_2_digit",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "country_code_2_digit",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "country_code_3_digit",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "country_code_3_digit",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "population",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "population",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "reported_date",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "reported_date",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "hospital_occupancy_count",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "hospital_occupancy_count",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ICU_occupancy_count",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "icu_occupancy_count",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "source",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "source",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_processed_hospital_admissions_daily",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_sql_covid_hospital",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "sqldb"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-04T09:56:15Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_copy_adl_to_sqldb_cases')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Cases and Deaths to SQLDB",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE covid_reporting.cases_and_deaths",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_process_casesdeaths",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_sql_covid_cases",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "sqldb"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-04T09:56:15Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_copy_adl_to_sqldb_testing')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy Testing",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobFSReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "preCopyScript": "TRUNCATE TABLE covid_reporting.testing",
                                "writeBehavior": "insert",
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 1
                                        },
                                        "sink": {
                                            "name": "country",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 2
                                        },
                                        "sink": {
                                            "name": "country_code_2_digit",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 3
                                        },
                                        "sink": {
                                            "name": "country_code_3_digit",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 4
                                        },
                                        "sink": {
                                            "name": "year_week",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 5
                                        },
                                        "sink": {
                                            "name": "week_start_date",
                                            "type": "DateTime",
                                            "physicalType": "date"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 6
                                        },
                                        "sink": {
                                            "name": "week_end_date",
                                            "type": "DateTime",
                                            "physicalType": "date"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 7
                                        },
                                        "sink": {
                                            "name": "new_cases",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 8
                                        },
                                        "sink": {
                                            "name": "tests_done",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "ordinal": 9
                                        },
                                        "sink": {
                                            "name": "population",
                                            "type": "Int64",
                                            "physicalType": "bigint"
                                        }
                                    },
                                    {
                                        "source": {
                                            "type": "String",
                                            "physicalType": "String",
                                            "ordinal": 12
                                        },
                                        "sink": {
                                            "name": "testing_data_source",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_processed_testing",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_sqldb_testing",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "sqldb"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-04T09:56:15Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_extract_data_from_pdf_custommodel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Use this template to extract data from a PDF source.\n\nThis uses the prebuilt-read model to extract text from documents. ",
                "activities": [
                    {
                        "name": "Cognitive Services - POST",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Ocp-Apim-Subscription-Key": {
                                    "value": "@pipeline().parameters.CognitiveServicesKey",
                                    "type": "Expression"
                                }
                            },
                            "url": {
                                "value": "@pipeline().parameters.CognitiveServicesURL",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "@concat('{\"urlSource\":\"',pipeline().parameters.PDF_SourceURL,'\"}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetPDFData_Dataflow",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Cognitive Services - POST",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_extract_data_from_pdf_template",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "OutputFolder": {
                                        "value": "'@{pipeline().parameters.OutputFolder}'",
                                        "type": "Expression"
                                    },
                                    "OutputContainer": {
                                        "value": "'@{pipeline().parameters.OutputContainer}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                },
                                "linkedServiceParameters": {
                                    "source1": {
                                        "linkedService": {
                                            "url": {
                                                "value": "@activity('Cognitive Services - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "None",
                            "cacheSinks": {
                                "firstRowOnly": true
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "CognitiveServicesURL": {
                        "type": "string",
                        "defaultValue": "https://adocintelteo4.cognitiveservices.azure.com/formrecognizer/documentModels/prebuilt-read:analyze?api-version=2022-08-31"
                    },
                    "CognitiveServicesKey": {
                        "type": "string",
                        "defaultValue": "--"
                    },
                    "PDF_SourceURL": {
                        "type": "string",
                        "defaultValue": "https://idodata.com/wp-content/uploads/2024/02/MASArticle-scaled.jpg"
                    },
                    "OutputContainer": {
                        "type": "string",
                        "defaultValue": "sink-adfextractpdftemplate"
                    },
                    "OutputFolder": {
                        "type": "string",
                        "defaultValue": "pdf"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2024-07-16T06:49:02Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_extract_data_from_pdf_layoutmodel')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Use this template to extract data from a PDF source.\n\nThis uses the prebuilt-read model to extract text from documents. ",
                "activities": [
                    {
                        "name": "Cognitive Services - POST",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Ocp-Apim-Subscription-Key": {
                                    "value": "@pipeline().parameters.CognitiveServicesKey",
                                    "type": "Expression"
                                }
                            },
                            "url": {
                                "value": "@pipeline().parameters.CognitiveServicesURL",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "@concat('{\"urlSource\":\"',pipeline().parameters.PDF_SourceURL,'\"}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetPDFData_Dataflow",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Cognitive Services - POST",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_extract_data_from_pdf_template",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "OutputFolder": {
                                        "value": "'@{pipeline().parameters.OutputFolder}'",
                                        "type": "Expression"
                                    },
                                    "OutputContainer": {
                                        "value": "'@{pipeline().parameters.OutputContainer}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                },
                                "linkedServiceParameters": {
                                    "source1": {
                                        "linkedService": {
                                            "url": {
                                                "value": "@activity('Cognitive Services - POST').output.ADFWebActivityResponseHeaders['Operation-Location']",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "None",
                            "cacheSinks": {
                                "firstRowOnly": true
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "CognitiveServicesURL": {
                        "type": "string",
                        "defaultValue": "https://adocintelteo4.cognitiveservices.azure.com/formrecognizer/documentModels/prebuilt-read:analyze?api-version=2022-08-31"
                    },
                    "CognitiveServicesKey": {
                        "type": "string",
                        "defaultValue": "68031f9775124bfaa6484794efd26682"
                    },
                    "PDF_SourceURL": {
                        "type": "string",
                        "defaultValue": "https://idodata.com/wp-content/uploads/2024/02/MASArticle-scaled.jpg"
                    },
                    "OutputContainer": {
                        "type": "string",
                        "defaultValue": "sink-adfextractpdftemplate"
                    },
                    "OutputFolder": {
                        "type": "string",
                        "defaultValue": "pdf"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2024-07-16T06:45:06Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_restapi_get_method_copydata_to_adlcsv')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": "https://reqres.in/api/users?page=1"
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(1, activity('Web1').output.total_pages)",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy each page",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET"
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['email']"
                                                    },
                                                    "sink": {
                                                        "name": "email"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['first_name']"
                                                    },
                                                    "sink": {
                                                        "name": "first_name"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['last_name']"
                                                    },
                                                    "sink": {
                                                        "name": "last_name"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['avatar']"
                                                    },
                                                    "sink": {
                                                        "name": "avatar"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['data']",
                                            "mapComplexValuesToString": false
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_rest_resreqdata",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "QueryParameter1": {
                                                    "value": "?page=@{item()}",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_adl_resreqdata1",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileName1": {
                                                    "value": "resreqpage@{item()}.csv",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "annotations": [],
                "lastPublishTime": "2024-07-16T12:24:33Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_restapi_get_method_using_copy_activity_only')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy from Poke API",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "RestSource",
                                "additionalColumns": [
                                    {
                                        "name": "read_time",
                                        "value": {
                                            "value": "@utcnow()",
                                            "type": "Expression"
                                        }
                                    }
                                ],
                                "httpRequestTimeout": "00:01:40",
                                "requestInterval": "00.00:00:00.010",
                                "requestMethod": "GET",
                                "paginationRules": {
                                    "AbsoluteUrl": "$.next"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "path": "$['results']"
                                        },
                                        "sink": {
                                            "path": "$['results_output']"
                                        }
                                    },
                                    {
                                        "source": {
                                            "path": "$['read_time']"
                                        },
                                        "sink": {
                                            "path": "$['read_time']"
                                        }
                                    }
                                ],
                                "collectionReference": ""
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "ds_rest_pokeapi",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "ds_blob_json_poke_api",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "annotations": [],
                "lastPublishTime": "2024-07-16T08:05:17Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_get_filenames_dynamically')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get Filenames Dynamically",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_get_filenames_dynamically_json",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "JsonReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Loop through Each File",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Filenames Dynamically",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Filenames Dynamically').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Copy Each File",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "JsonSource",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "JsonReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "JsonSink",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "JsonWriteSettings"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_get_filename_dynamically_inside_foreach_activity",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "filename": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_sink_get_filenames_dynamically",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "1. scenarios"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-16T10:57:15Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Delete files older than 30 days')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Please input a folder path as the parameter for this pipeline, and the pipeline will delete files which were last modified more than 30 days ago under the particular folder path.",
                "activities": [
                    {
                        "name": "DeleteFiles",
                        "description": "Connect to your storage account to save the log file.",
                        "type": "Delete",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "BinaryDatasetForDeleteActivity",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FolderPath": {
                                        "value": "@pipeline().parameters.SourceFolder",
                                        "type": "Expression"
                                    },
                                    "Directory": {
                                        "value": "@pipeline().parameters.SourceDirectory",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "logStorageSettings": {
                                "linkedServiceName": {
                                    "referenceName": "ls_ablob_covidreportingsa",
                                    "type": "LinkedServiceReference"
                                },
                                "path": {
                                    "value": "@pipeline().parameters.LoggingPath",
                                    "type": "Expression"
                                }
                            },
                            "enableLogging": true,
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "modifiedDatetimeEnd": {
                                    "value": "@{adddays(pipeline().TriggerTime, -30)}",
                                    "type": "Expression"
                                },
                                "wildcardFileName": "*"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "SourceFolder": {
                        "type": "string",
                        "defaultValue": "sourcefolder"
                    },
                    "SourceDirectory": {
                        "type": "string",
                        "defaultValue": "subfolder"
                    },
                    "LoggingPath": {
                        "type": "string",
                        "defaultValue": "loggingfolder/subfolder"
                    }
                },
                "folder": {
                    "name": "2. template_learnings"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-16T12:24:34Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/tr_ingest_ecdc_data')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipeline": {
                    "pipelineReference": {
                        "referenceName": "pl_ingest_http_to_adl",
                        "type": "PipelineReference"
                    },
                    "parameters": {}
                },
                "type": "TumblingWindowTrigger",
                "typeProperties": {
                    "frequency": "Hour",
                    "interval": 24,
                    "startTime": "2024-07-03T00:00:00Z",
                    "delay": "00:00:00",
                    "maxConcurrency": 50,
                    "retryPolicy": {
                        "intervalInSeconds": 30
                    },
                    "dependsOn": []
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pl_ingest_http_to_adl')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_process_cases_deaths')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "df_transform_cases_deaths",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_transform_cases_deaths",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "CasesAndDeathsSource": {},
                                    "CountryLookup": {},
                                    "CasesDeathsSink": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "process"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-03T16:41:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/df_transform_cases_deaths')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_process_hospital_admissions')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "df_transform_hospital_admissions",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "df_transform_hospital_admissions",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "HospitalAdmissionsSource": {},
                                    "CountryLookup": {},
                                    "DimDateLookup": {},
                                    "SinkWeekly": {},
                                    "SinkDaily": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "process"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-03T16:41:48Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/df_transform_hospital_admissions')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pl_execute_population_pipelines')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Execute Ingest Population Data",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pl_ingest_blob_to_adl",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Execute Process Population Data",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Execute Ingest Population Data",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "pl_process_population_data",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "execute pipeline"
                },
                "annotations": [],
                "lastPublishTime": "2024-07-25T01:15:47Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pl_ingest_blob_to_adl')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/tr_population_data_arrives')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "pl_execute_population_pipelines",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/population/blobs/population_by_age",
                    "ignoreEmptyBlobs": true,
                    "scope": "[parameters('tr_population_data_arrives_properties_typeProperties_scope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pl_execute_population_pipelines')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/tr_process_cases_deaths')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipeline": {
                    "pipelineReference": {
                        "referenceName": "pl_process_cases_deaths",
                        "type": "PipelineReference"
                    },
                    "parameters": {}
                },
                "type": "TumblingWindowTrigger",
                "typeProperties": {
                    "frequency": "Hour",
                    "interval": 24,
                    "startTime": "2024-07-03T00:00:00Z",
                    "delay": "00:00:00",
                    "maxConcurrency": 50,
                    "retryPolicy": {
                        "intervalInSeconds": 30
                    },
                    "dependsOn": [
                        {
                            "type": "TumblingWindowTriggerDependencyReference",
                            "referenceTrigger": {
                                "referenceName": "tr_ingest_ecdc_data",
                                "type": "TriggerReference"
                            }
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/pl_process_cases_deaths')]",
                "[concat(variables('factoryId'), '/triggers/tr_ingest_ecdc_data')]"
            ]
        }
    ]
}
